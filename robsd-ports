#!/bin/ksh

set -eu

usage() {
	xargs 1>&2 <<-EOF
	usage: robsd-ports
	[-d]
	[-P patch]
	[-c comment]
	[-r path]
	[-s step]
	[-t tag]
	EOF
	exit 1
}

. "${EXECDIR:-/usr/local/libexec/robsd}/util.sh"

setmode "robsd-ports"
setprogname "robsd-ports"
[ "$(id -u)" -ne 0 ] && fatal "must be run as root"
config_load "$(config_path)"

COMMENT=""
STATPID=""
STEP=1

while getopts "dP:c:r:s:t:" opt; do
	case "$opt" in
	d)	DETACH=0;;
	P)	PORTSDIFF="${PORTSDIFF}${PORTSDIFF:+ }$(readlink -f "${OPTARG}")";;
	c)	COMMENT="$OPTARG";;
	r)	BUILDDIR="$(readlink -f "$OPTARG")";;
	s)	SKIP="${SKIP}${SKIP:+ }${OPTARG}";;
	t)	TAGS="${TAGS}${TAGS:+ }${OPTARG}";;
	*)	usage;;
	esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ] && usage

trap 'trap_exit -r "$ROBSDDIR" -b "$BUILDDIR" -s "$STATPID"' EXIT

if [ -z "$BUILDDIR" ]; then
	check_perf || exit 1

	BUILDDIR="${ROBSDDIR}/$(build_id "$ROBSDDIR")"
else
	STEP="$(step_next "${BUILDDIR}/steps")"
fi
build_init "$BUILDDIR"
info "using directory ${BUILDDIR} at step ${STEP}"

lock_acquire "$ROBSDDIR" "$BUILDDIR" || exit 1

if [ "$STEP" -eq 1 ]; then
	if [ -n "$COMMENT" ]; then
		cat "$COMMENT" >"${BUILDDIR}/comment"
	elif [ -n "$PORTSDIFF" ]; then
		# Generate comment including a list of the diff(s),
		{
			echo 'Applied the following diff(s):'
			# shellcheck disable=SC2030
			[ -n "$PORTSDIFF" ] && echo "$PORTSDIFF" | xargs ls
		} >"${BUILDDIR}/comment"
	fi

	if [ -n "$SKIP" ]; then
		info "skipping steps: ${SKIP}"
		for _step in $SKIP; do
			_id="$(step_id "$_step")"
			step_end -S -n "$_step" -s "$_id" "${BUILDDIR}/steps"
		done
	fi

	if [ -n "$TAGS" ]; then
		echo "$TAGS" >"${BUILDDIR}/tags"
	fi

	"$ROBSDSTAT" -H >"${BUILDDIR}/stat.csv"
fi

# Copy the diff(s) initially, otherwise use the previously copied ones.
if [ "$STEP" -eq 1 ]; then
	# shellcheck disable=SC2086,SC2031
	PORTSDIFF="$(diff_copy -d "${PORTSDIR:-}" "${BUILDDIR}/ports.diff" $PORTSDIFF)"
else
	PORTSDIFF="$(diff_list "$BUILDDIR" "ports.diff")"
fi

if [ "$KEEP" -gt 0 ]; then
	/usr/local/sbin/robsd-ports-clean "$KEEP"
fi

"$ROBSDSTAT" -u _pbuild -u _pfetch >>"${BUILDDIR}/stat.csv" &
STATPID="$!"

if [ "$DETACH" -eq 1 ]; then
	# Signal to info() that no further output should be written to robsd.log
	# as we're about redirect all output to the same log.
	DETACH=2
	exec </dev/null >>"${BUILDDIR}/robsd.log" 2>&1

	# Reinstall trap handler since they are not inherited by subprocesses.
	trap '-' EXIT
	{
		trap 'trap_exit -r "$ROBSDDIR" -b "$BUILDDIR" -s "${STATPID}"' EXIT
		robsd "$STEP"
	} &
	info "running in detach mode as pid ${!}"
else
	info "running as pid ${$}"
	robsd "$STEP"
fi
