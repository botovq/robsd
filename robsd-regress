#!/bin/ksh

set -eu

usage() {
	xargs 1>&2 <<-EOF
	usage: robsd-regress
	[-D]
	[-r path]
	EOF
	exit 1
}

. "${EXECDIR:-/usr/local/libexec/robsd}/util.sh"

setmode "robsd-regress"
setprogname "robsd-regress"
[ "$(id -u)" -ne 0 ] && fatal "must be run as root"
config_load "${ROBSDCONF:-/etc/robsd-regress.conf}"

while getopts "Dr:" opt; do
	case "$opt" in
	D)	DETACH=1;;
	r)	LOGDIR="$(readlink -f "$OPTARG")";;
	*)	usage;;
	esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ] && usage

trap 'trap_exit -b "$BUILDDIR" -l "$LOGDIR"' EXIT

if [ -z "$LOGDIR" ]; then
	check_perf || exit 1

	LOGDIR="${BUILDDIR}/$(build_id "$BUILDDIR")"
	mkdir "$LOGDIR"
	: >"${LOGDIR}/steps"
else
	STEP="$(step_next "${LOGDIR}/steps")"
fi
touch "${LOGDIR}/robsd.log"
info "using directory ${LOGDIR} at step ${STEP}"

if ! lock_acquire "$BUILDDIR" "$LOGDIR"; then
	# Signal to info() that no further output should be written to robsd.log
	# as we're about the remove the directory where the same log resides.
	DETACH=0

	# Do not leave an empty release around.
	[ "$STEP" -eq 1 ] && rm -r "$LOGDIR"

	fatal "already running"
fi

if [ "$KEEP" -gt 0 ]; then
	/usr/local/sbin/robsd-regress-clean "$KEEP"
fi

if [ "$DETACH" -eq 1 ]; then
	# Signal to info() that no further output should be written to robsd.log
	# as we're about redirect all output to the same log.
	DETACH=2
	exec </dev/null >>"${LOGDIR}/robsd.log" 2>&1

	# Reinstall trap handler since they are not inherited by subprocesses.
	trap '-' EXIT
	{
		trap 'trap_exit -b "$BUILDDIR" -l "$LOGDIR"' EXIT
		robsd "$STEP"
	} &
	info "running in detach mode as pid ${!}"
else
	info "running as pid ${$}"
	robsd "$STEP"
fi
