#!/bin/ksh

set -eu

usage() {
	xargs 1>&2 <<-EOF
	usage: robsd
	[-D]
	[-c comment]
	[-r path]
	[-s step]
	[-S src-diff]
	[-X xenocara-diff]
	EOF
	exit 1
}

. "${EXECDIR:-/usr/local/libexec/robsd}/util.sh"

setmode "robsd"
setprogname "robsd"
[ "$(id -u)" -ne 0 ] && fatal "must be run as root"
config_load "$(config_path)"

COMMENT=""
STEP=1

while getopts "DS:X:c:r:s:" opt; do
	case "$opt" in
	D)	DETACH=1;;
	S)	BSDDIFF="${BSDDIFF}${BSDDIFF:+ }$(readlink -f "${OPTARG}")";;
	X)	XDIFF="${XDIFF}${XDIFF:+ }$(readlink -f "${OPTARG}")";;
	c)	COMMENT="$OPTARG";;
	r)	BUILDDIR="$(readlink -f "$OPTARG")";;
	s)	SKIP="${SKIP}${SKIP:+ }${OPTARG}";;
	*)	usage;;
	esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ] && usage

trap 'trap_exit -r "$ROBSDDIR" -b "$BUILDDIR"' EXIT

if [ -z "$BUILDDIR" ]; then
	check_perf || exit 1

	BUILDDIR="${ROBSDDIR}/$(build_id "$ROBSDDIR")"
else
	STEP="$(step_next "${BUILDDIR}/steps")"
fi
build_init "$BUILDDIR"
info "using directory ${BUILDDIR} at step ${STEP}"

lock_acquire "$ROBSDDIR" "$BUILDDIR" || exit 1

if [ "$STEP" -eq 1 ]; then
	if [ -n "$COMMENT" ]; then
		cat "$COMMENT" >"${BUILDDIR}/comment"
	elif [ -n "$BSDDIFF" ] || [ -n "$XDIFF" ]; then
		# Generate comment including a list of the diff(s),
		{
			echo 'Applied the following diff(s):'
			# shellcheck disable=SC2030
			[ -n "$BSDDIFF" ] && echo "$BSDDIFF" | xargs ls
			# shellcheck disable=SC2030
			[ -n "$XDIFF" ] && echo "$XDIFF" | xargs ls
		} >"${BUILDDIR}/comment"
	fi
fi

# Copy the diff(s) initially, otherwise use the previously copied ones.
if [ "$STEP" -eq 1 ]; then
	# shellcheck disable=SC2086,SC2031
	BSDDIFF="$(diff_copy -d "$BSDSRCDIR" "${BUILDDIR}/src.diff" $BSDDIFF)"
	# shellcheck disable=SC2086,SC2031
	XDIFF="$(diff_copy -d "$XSRCDIR" "${BUILDDIR}/xenocara.diff" $XDIFF)"
else
	BSDDIFF="$(diff_list "$BUILDDIR" "src.diff")"
	XDIFF="$(diff_list "$BUILDDIR" "xenocara.diff")"
fi

# Take note of skipped steps initially.
if [ "$STEP" -eq 1 ] && [ -n "$SKIP" ]; then
	info "skipping steps: ${SKIP}"
	for _step in $SKIP; do
		_id="$(step_id "$_step")"
		step_end -S -n "$_step" -s "$_id" "${BUILDDIR}/steps"
	done
fi

if [ "$KEEP" -gt 0 ]; then
	/usr/local/sbin/robsd-clean "$KEEP"
fi

if [ "$DETACH" -eq 1 ]; then
	# Signal to info() that no further output should be written to robsd.log
	# as we're about redirect all output to the same log.
	DETACH=2
	exec </dev/null >>"${BUILDDIR}/robsd.log" 2>&1

	# Reinstall trap handler since they are not inherited by subprocesses.
	trap '-' EXIT
	{
		trap 'trap_exit -r "$ROBSDDIR" -b "$BUILDDIR"' EXIT
		robsd "$STEP"
	} &
	info "running in detach mode as pid ${!}"
else
	info "running as pid ${$}"
	robsd "$STEP"
fi
