#!/bin/ksh

set -eu

usage() {
	cat <<-EOF | xargs 1>&2
	usage: robsd
	[-D]
	[-c file]
	[-r path]
	[-s step]
	[-S src-diff]
	[-X xenocara-diff]
	EOF
	exit 1
}

atexit() {
	local _err=$?

	lock_release "$BUILDDIR"

	if [ "$_err" -ne 0 ] || must_report "$STEP"; then
		if report -r "${LOGDIR}/report" -s "${LOGDIR}/steps"; then
			# Do not send mail during interactive invocations.
			if ! [ -t 0 ]; then
				sendmail root <"${LOGDIR}/report"
			fi
		fi
	fi

	if [ "$_err" -ne 0 ]; then
		info "failed in step ${STEP:-unknown}"
	fi

	return "$_err"
}

main() {
	local _exit
	local _log
	local _s
	local _t0
	local _t1

	while :; do
		STEP="$(step_name "$S")"
		_s="$S"
		S=$((S + 1))

		if step_eval -n "$STEP" "${LOGDIR}/steps" && step_skip; then
			info "skipping step ${STEP}"
			continue
		else
			info "step ${STEP}"
		fi

		if [ "$STEP" = "end" ]; then
			# The duration of the end step is the accumulated
			# duration.
			step_end -d "$(duration_total "${LOGDIR}/steps")" \
				-n "$STEP" -s "$_s" "${LOGDIR}/steps"
			return 0
		fi

		_log="${LOGDIR}/$(log_id -l "$LOGDIR" -n "$STEP" -s "$_s")"
		_exit=0
		_t0="$(date '+%s')"
		step_begin -l "$_log" -n "$STEP" -s "$_s" "${LOGDIR}/steps"
		step_exec -f "${LOGDIR}/fail" -l "$_log" \
			"${EXECDIR}/${STEP}.sh" || _exit="$?"
		_t1="$(date '+%s')"
		step_end -d "$((_t1 - _t0))" -e "$_exit" -l "$_log" -n "$STEP" \
			-s "$_s" "${LOGDIR}/steps"
		[ "$_exit" -ne 0 ] && return 1

		# Reboot in progress?
		pgrep shutdown >/dev/null && return 0
	done
}

# build_id directory
#
# Generate a new build directory path.
build_id() {
	local _c _d

	_d="$(date '+%Y-%m-%d')"
	_c="$(find "$1" -type d -name "${_d}*" | wc -l)"
	printf '%s.%d\n' "$_d" "$((_c + 1))"
}

# check_perf
#
# Sanity check performance parameters.
check_perf() {
	case "$(sysctl -n hw.perfpolicy)" in
	auto|high)	return 0;;
	*)		;;
	esac

	[ "$(sysctl -n hw.setperf)" -eq 100 ] && return 0

	info "non-optimal performance detected, check hw.perfpolicy and hw.setperf"
	return 1
}

# lock_acquire build-dir log-dir
#
# Acquire the mutex lock.
lock_acquire() {
	local _owner
	local _builddir="$1"; : "${_builddir:?}"
	local _logdir="$2"; : "${_logdir:?}"

	_owner="$(cat "${_builddir}/.running" 2>/dev/null || :)"
	if [ -n "$_owner" ]; then
		info "${_owner}: lock already acquired"
		return 1
	fi

	echo "$_logdir" >"${_builddir}/.running"
}

# lock_release build-dir
#
# Release the mutex lock.
lock_release() {
	local _builddir="$1"; : "${_builddir:?}"

	rm -f "${_builddir}/.running"
}

# must_report step-name
#
# Exits 0 if a report must be generated.
must_report() {
	case "$1" in
	end)	return 0;;
	*)	return 1;;
	esac
}

# step_begin -l log -n name -s step-name
#
# Mark the given step as about to execute by writing an entry to the given
# file. The same entry will be overwritten once the step has ended.
step_begin() {
	local _l _n _s

	while [ $# -gt 0 ]; do
		case "$1" in
		-l)	shift; _l="$1";;
		-n)	shift; _n="$1";;
		-s)	shift; _s="$1";;
		*)	break;;
		esac
		shift
	done

	step_end -d -1 -e 0 -l "$_l" -n "$_n" -s "$_s" "$1"
}

# step_exec -f fail -l log step
#
# Execute the given step and redirect any output to log.
step_exec() (
	local _fail _log _step

	while [ $# -gt 0 ]; do
		case "$1" in
		-f)	shift; _fail="$1";;
		-l)	shift; _log="$1";;
		*)	break;;
		esac
		shift
	done
	_step="$1"
	: "${_fail:?}"
	: "${_log:?}"
	: "${_step:?}"

	[ -t 0 ] || exec >/dev/null 2>&1

	trap ': >$_fail' INT

	{ sh -eux "$_step" </dev/null 2>&1 || : >"$_fail"; } | tee "$_log"
	if [ -e "$_fail" ]; then
		rm -f "$_fail"
		return 1
	fi
	return 0
)

. "${EXECDIR:-/usr/local/libexec/robsd}/util.sh"

setprogname "robsd"
[ "$(id -u)" -ne 0 ] && fatal "must be run as root"
config_load "/etc/robsdrc"

COMMENT=""
DETACH=0
LOGDIR=""
S=1
STEP=""

while getopts "DS:X:c:r:s:" opt; do
	case "$opt" in
	D)	DETACH=1;;
	S)	BSDDIFF="${BSDDIFF}${BSDDIFF:+ }$(readlink -f "${OPTARG}")";;
	X)	XDIFF="${XDIFF}${XDIFF:+ }$(readlink -f "${OPTARG}")";;
	c)	COMMENT="$OPTARG";;
	r)	LOGDIR="$OPTARG";;
	s)	SKIP="${SKIP} ${OPTARG}";;
	*)	usage;;
	esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ] && usage

trap 'atexit' EXIT
trap 'info "caught SIGINT"' INT

if [ -z "$LOGDIR" ]; then
	check_perf || exit 1

	LOGDIR="${BUILDDIR}/$(build_id "$BUILDDIR")"
	mkdir "$LOGDIR"
	: >"${LOGDIR}/steps"
else
	S="$(step_next "${LOGDIR}/steps")"
fi
if [ "$DETACH" -eq 1 ]; then
	exec </dev/null >>"${LOGDIR}/robsd.log" 2>&1
fi
info "using directory ${LOGDIR} at step ${S}"

# Redundant export since it's already done by config_load but
# silence shellcheck.
RELEASEDIR="$(release_dir "$LOGDIR")"; export RELEASEDIR

if ! lock_acquire "$BUILDDIR" "$LOGDIR"; then
	# Do not leave an empty release around.
	[ "$S" -eq 1 ] && rm -r "$LOGDIR"

	fatal "already running"
fi

if [ -n "$COMMENT" ]; then
	if ! comment "$COMMENT" "${LOGDIR}/comment"; then
		fatal "comment already specified"
	fi
elif [ -n "$BSDDIFF" ] || [ -n "$XDIFF" ]; then
	# No comment specified, include a list of the diff(s).
	{
		echo 'Applied the following diff(s):'
		[ -n "$BSDDIFF" ] && echo "$BSDDIFF" | xargs ls
		[ -n "$XDIFF" ] && echo "$XDIFF" | xargs ls
	} | comment "-" "${LOGDIR}/comment" || :
fi

# Copy the diff(s) initially, otherwise use the previously copied ones.
if [ "$S" -eq 1 ]; then
	# shellcheck disable=SC2086
	BSDDIFF="$(diff_copy "${LOGDIR}/src.diff" $BSDDIFF)"
	# shellcheck disable=SC2086
	XDIFF="$(diff_copy "${LOGDIR}/xenocara.diff" $XDIFF)"
else
	BSDDIFF="$(diff_list "$LOGDIR" "src.diff")"
	XDIFF="$(diff_list "$LOGDIR" "xenocara.diff")"
fi

if [ "$KEEP" -gt 0 ]; then
	/usr/local/sbin/robsd-clean "$KEEP"
fi

if [ -n "$SKIP" ]; then
	for _step in $SKIP; do
		_id="$(step_id "$_step")"
		step_end -S -n "$_step" -s "$_id" "${LOGDIR}/steps"
	done
fi

if [ "$DETACH" -eq 1 ]; then
	# Reinstall trap handler since they are not inherited by subprocesses.
	trap '-' EXIT
	{ trap 'atexit' EXIT; main; } &
	info "running in detach mode as pid ${!}"
else
	info "running as pid ${$}"
	main
fi
