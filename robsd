#!/bin/ksh

set -eu

usage() {
	cat <<-EOF | xargs 1>&2
	usage: robsd
	[-v]
	[-S src-diff]
	[-X xenocara-diff]
	[-r path]
	EOF
	exit 1
}

fatal() {
	info "$@"
	exit 1
}

info() {
	echo "robsd: ${*}" 1>&2
}

atexit() {
	local _err=$?

	lock_release "$LOGDIR"

	if [ $_err -ne 0 ] || must_report "$STAGE"; then
		report -r "${LOGDIR}/report" -s "${LOGDIR}/stages"
	fi

	if [ $_err -ne 0 ]; then
		info "failed in stage ${STAGE:-unknown}"
	fi

	return "$_err"
}

# build_id directory
#
# Generate a new build directory path.
build_id() {
	local _c _d

	_d="$(date '+%Y-%m-%d')"
	_c="$(find "$1" -type d -name "${_d}*" | wc -l)"
	printf '%s.%d\n' "$_d" "$((_c + 1))"
}

# check_perf
#
# Sanity check performance parameters.
check_perf() {
	case "$(sysctl -n hw.perfpolicy)" in
	auto|high)	return 0;;
	esac

	[ "$(sysctl -n hw.setperf)" -eq 100 ] && return 0

	info "non-optimal performance detected, check hw.perfpolicy and hw.setperf"
	return 1
}

# lock_present directory
#
# Exits 0 if no build lock already is acquired.
lock_present() {
	! find "$1" -type f -name running | cmp -s - /dev/null
}

# lock_acquire directory
#
# Acquire a new build lock.
lock_acquire() {
	touch "${1}/running"
}

# lock_release directory
#
# Release the current build lock.
lock_release() {
	rm -f "${1}/running"
}

# log_id stage-id stage-name
#
# Generate the corresponding log file name for the given stage.
log_id() {
	printf '%02d-%s.log' "$1" "$2"
}

# must_report stage
#
# Exits 0 if a report must be generated.
must_report() {
	case "$1" in
	end)	return 0;;
	*)	return 1;;
	esac
}

# report -r report -s stages
#
# Generate a build report and save it to report.
report() {
	local _duration=0 _i=1 _name=""
	local _d _exit _report _stages _status

	while [ $# -gt 0 ]; do
		case "$1" in
		-r)	shift; _report="$1";;
		-s)	shift; _stages="$1";;
		*)	break;;
		esac
		shift
	done

	[ -e "$_stages" ] || return 0

	while stage_eval "$_i" "$_stages"; do
		_i=$((_i + 1))

		_name="$(stage_value name)"
		report_skip "$_name" && continue

		_duration="$(stage_value duration)"
		_exit="$(stage_value exit)"

		printf '> %s:\n' "$_name"
		printf 'Exit: %d\n' "$(stage_value exit)"
		printf 'Duration: %s\n' "$(report_duration "$_duration")"
		printf 'Log: %s\n' "$(basename "$(stage_value log)")"
		report_log "$_name" "$(stage_value log)"
		printf '\n'
	done >"$_report"

	_duration="$(build_duration "$_stages")"

	if [ "$_exit" -eq 0 ]; then
		_status='ok'
		# Only calculate the build duration delta on success.
		_d="$(report_duration -d "$_duration")"
	else
		_status="failed in ${_name}"
		_d="$(report_duration "$_duration")"
	fi

	# Add stats section to the beginning of the report.
	ed -s <<-EOF "$_report"
	H
	0a
	> stats:
	Build: ${LOGDIR}
	Status: ${_status}
	Duration: ${_d}
	Size: $(report_size "${RELEASEDIR}/bsd")
	Size: $(report_size "${RELEASEDIR}/bsd.mp")
	Size: $(report_size "${RELEASEDIR}/bsd.rd")

	.
	w
	EOF

	# Do not send mail during interactive invocations.
	[ -t 0 ] && return 0

	mail -s "robsd: $(machine): ${_status}" \
		$(report_recipients "$_stages") <"$_report"
}

# report_log stage log
#
# Writes an excerpt of the given log.
report_log() {
	[ -s "$2" ] && echo

	case "$1" in
	cvs|patch|revert|distrib)
		cat "$2"
		;;
	checkflist)
		# Silent if the log only contains PS4 traces.
		grep -vq '^\+' "$2" || return 0
		cat "$2"
		;;
	*)
		tail "$2"
		;;
	esac
}

# stage_begin -l log -n name -s stage
#
# Mark the given stage as about to execute by writing an entry to the given
# file. The same entry will be overwritten once the stage has ended.
stage_begin() {
	local _l _n _s

	while [ $# -gt 0 ]; do
		case "$1" in
		-l)	shift; _l="$1";;
		-n)	shift; _n="$1";;
		-s)	shift; _s="$1";;
		*)	break;;
		esac
		shift
	done

	stage_end -d -1 -e 0 -l "$_l" -n "$_n" -s "$_s" "$1"
}

# stage_end [-e exit] [-l log] -d duration -n name -s stage file
#
# Mark the given stage as ended by writing an entry to the given file.
stage_end() {
	local _e=0 _l=""
	local _d _n _s

	while [ $# -gt 0 ]; do
		case "$1" in
		-d)	shift; _d="$1";;
		-e)	shift; _e="$1";;
		-l)	shift; _l="$1";;
		-n)	shift; _n="$1";;
		-s)	shift; _s="$1";;
		*)	break;;
		esac
		shift
	done

	# Remove any existing entry for the same stage, could be present if a
	# previous execution failed.
	[ -e "$1" ] && sed -i -e "/stage=\"${_s}\"/d" "$1"

	# Caution: all values must be quoted and cannot contain spaces.
	{
		printf 'stage="%d"\n' "$_s"
		printf 'name="%s"\n' "$_n"
		printf 'exit="%d"\n' "$_e"
		printf 'duration="%d"\n' "$_d"
		printf 'log="%s"\n' "$_l"
		printf 'user="%s"\n' "$(logname)"
		printf 'time="%d"\n' "$(date '+%s')"
	} | paste -s -d ' ' - >>"$1"
}

# stage_exec -f fail -l log stage
#
# Execute the given stage and redirect any output to log.
stage_exec() (
	local _fail _log

	while [ $# -gt 0 ]; do
		case "$1" in
		-f)	shift; _fail="$1";;
		-l)	shift; _log="$1";;
		*)	break;;
		esac
		shift
	done

	[ -t 0 ] || exec >/dev/null 2>&1

	trap ": >$_fail" INT

	{ sh -eux "$1" </dev/null 2>&1 || : >"$_fail"; } | tee "$_log"
	if [ -e "$_fail" ]; then
		rm -f "$_fail"
		return 1
	fi
	return 0
)

# stage_names
#
# Writes the names of all stages in execution order.
# The last stage named end is a sentinel stage without a corresponding stage
# script.
stage_names() {
	cat <<-EOF
	env
	cvs
	patch
	kernel
	env
	base
	release
	checkflist
	xbase
	xrelease
	image
	revert
	distrib
	end
	EOF
}

# stage_resolve stage
#
# Resolve the given numeric stage to its corresponding name.
stage_resolve() {
	local _stage

	_stage="$(stage_names | sed -n -e "${1}p")"
	if [ -n "$_stage" ]; then
		echo "$_stage"
	else
		return 1
	fi
}

[ "$(id -u)" -ne 0 ] && fatal "must be run as root"

# Global variables with sensible defaults.
export BSDOBJDIR; BSDOBJDIR="/usr/obj"
export BSDSRCDIR; BSDSRCDIR="/usr/src"
export BUILDDIR
export CVSROOT
export CVSUSER
export DESTDIR
export DISTRIBHOST
export DISTRIBPATH
export DISTRIBUSER
export EXECDIR; EXECDIR="/usr/local/libexec/robsd"
export KEEP; KEEP=0
export LOGDIR
export MAKEFLAGS; MAKEFLAGS="-j$(sysctl -n hw.ncpuonline)"
export PATH; PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R6/bin"
export RELEASEDIR
export SIGNIFY; SIGNIFY=""
export SRCDIFF; SRCDIFF=""
export X11DIFF; X11DIFF=""
export X11OBJDIR; X11OBJDIR="/usr/xobj"
export X11SRCDIR; X11SRCDIR="/usr/xenocara"

[ -e /etc/robsdrc ] && . /etc/robsdrc

# Ensure mandatory variables are defined.
: "${BUILDDIR:?}"
: "${CVSROOT:?}"
: "${CVSUSER:?}"
: "${DESTDIR:?}"
: "${DISTRIBHOST:?}"
: "${DISTRIBPATH:?}"
: "${DISTRIBUSER:?}"
: "${X11OBJDIR:?}"

. "${EXECDIR}/util.sh"

LOGDIR=""
S=1
STAGE=""

while getopts "S:X:r:v" opt; do
	case "$opt" in
	S)	SRCDIFF="$OPTARG";;
	X)	X11DIFF="$OPTARG";;
	r)	LOGDIR="$OPTARG";;
	v)	set -x;;
	*)	usage;;
	esac
done
shift $((OPTIND - 1))
[ $# -ne 0 ] && usage

trap 'atexit' EXIT
trap 'info "caught SIGINT"' INT

if [ -z "$LOGDIR" ]; then
	check_perf || exit 1

	LOGDIR="${BUILDDIR}/$(build_id "$BUILDDIR")"
	mkdir "$LOGDIR"
else
	S="$(stage_next "${LOGDIR}/stages")"
	info "resume build from stage ${S}"
fi
info "using directory ${LOGDIR}"
RELEASEDIR="$(release_dir "$LOGDIR")"

if lock_present "$BUILDDIR"; then
	# Do not leave an empty release around.
	[ "$S" -eq 1 ] && rm -r "$LOGDIR"

	fatal "already running"
fi
lock_acquire "$LOGDIR"

SRCDIFF="$(diff_copy "$SRCDIFF" "${LOGDIR}/src.diff)" ||
	fatal "src diff already specified"
X11DIFF="$(diff_copy "$X11DIFF" "${LOGDIR}/xenocara.diff)" ||
	fatal "xenocara diff already specified"

if [ "$KEEP" -gt 0 ]; then
	purge "$BUILDDIR" "$KEEP"
fi

while :; do
	STAGE="$(stage_resolve "$S")"
	info "stage ${STAGE}"

	if [ "$STAGE" = "end" ]; then
		# The duration of the end stage is the accumulated duration.
		stage_end -d "$(build_duration "${LOGDIR}/stages")" -n "$STAGE" \
			-s "$S" "${LOGDIR}/stages"
		exit 0
	fi

	LOG="${LOGDIR}/$(log_id "$S" "$STAGE")"
	EXIT=0
	T0="$(date '+%s')"
	stage_begin -l "$LOG" -n "$STAGE" -s "$S" "${LOGDIR}/stages"
	stage_exec -f "${LOGDIR}/fail" -l "$LOG" "${EXECDIR}/${STAGE}.sh" ||
		EXIT=1
	T1="$(date '+%s')"
	stage_end -d "$((T1 - T0))" -e "$EXIT" -l "$LOG" -n "$STAGE" -s "$S" \
		"${LOGDIR}/stages"
	[ $EXIT -ne 0 ] && exit 1

	# Reboot in progress?
	pgrep shutdown >/dev/null && exit 0

	S=$((S + 1))
done
